// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/gas-feeder/pkg/db/ent/deposit"
	"github.com/google/uuid"
)

// DepositCreate is the builder for creating a Deposit entity.
type DepositCreate struct {
	config
	mutation *DepositMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (dc *DepositCreate) SetCreatedAt(u uint32) *DepositCreate {
	dc.mutation.SetCreatedAt(u)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DepositCreate) SetNillableCreatedAt(u *uint32) *DepositCreate {
	if u != nil {
		dc.SetCreatedAt(*u)
	}
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DepositCreate) SetUpdatedAt(u uint32) *DepositCreate {
	dc.mutation.SetUpdatedAt(u)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DepositCreate) SetNillableUpdatedAt(u *uint32) *DepositCreate {
	if u != nil {
		dc.SetUpdatedAt(*u)
	}
	return dc
}

// SetDeletedAt sets the "deleted_at" field.
func (dc *DepositCreate) SetDeletedAt(u uint32) *DepositCreate {
	dc.mutation.SetDeletedAt(u)
	return dc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dc *DepositCreate) SetNillableDeletedAt(u *uint32) *DepositCreate {
	if u != nil {
		dc.SetDeletedAt(*u)
	}
	return dc
}

// SetAccountID sets the "account_id" field.
func (dc *DepositCreate) SetAccountID(u uuid.UUID) *DepositCreate {
	dc.mutation.SetAccountID(u)
	return dc
}

// SetDepositAmount sets the "deposit_amount" field.
func (dc *DepositCreate) SetDepositAmount(u uint64) *DepositCreate {
	dc.mutation.SetDepositAmount(u)
	return dc
}

// SetID sets the "id" field.
func (dc *DepositCreate) SetID(u uuid.UUID) *DepositCreate {
	dc.mutation.SetID(u)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DepositCreate) SetNillableID(u *uuid.UUID) *DepositCreate {
	if u != nil {
		dc.SetID(*u)
	}
	return dc
}

// Mutation returns the DepositMutation object of the builder.
func (dc *DepositCreate) Mutation() *DepositMutation {
	return dc.mutation
}

// Save creates the Deposit in the database.
func (dc *DepositCreate) Save(ctx context.Context) (*Deposit, error) {
	var (
		err  error
		node *Deposit
	)
	if err := dc.defaults(); err != nil {
		return nil, err
	}
	if len(dc.hooks) == 0 {
		if err = dc.check(); err != nil {
			return nil, err
		}
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DepositMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dc.check(); err != nil {
				return nil, err
			}
			dc.mutation = mutation
			if node, err = dc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			if dc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DepositCreate) SaveX(ctx context.Context) *Deposit {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DepositCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DepositCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DepositCreate) defaults() error {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		if deposit.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized deposit.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := deposit.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		if deposit.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized deposit.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := deposit.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dc.mutation.DeletedAt(); !ok {
		if deposit.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized deposit.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := deposit.DefaultDeletedAt()
		dc.mutation.SetDeletedAt(v)
	}
	if _, ok := dc.mutation.ID(); !ok {
		if deposit.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized deposit.DefaultID (forgotten import ent/runtime?)")
		}
		v := deposit.DefaultID()
		dc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dc *DepositCreate) check() error {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Deposit.created_at"`)}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Deposit.updated_at"`)}
	}
	if _, ok := dc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Deposit.deleted_at"`)}
	}
	if _, ok := dc.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`ent: missing required field "Deposit.account_id"`)}
	}
	if _, ok := dc.mutation.DepositAmount(); !ok {
		return &ValidationError{Name: "deposit_amount", err: errors.New(`ent: missing required field "Deposit.deposit_amount"`)}
	}
	return nil
}

func (dc *DepositCreate) sqlSave(ctx context.Context) (*Deposit, error) {
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (dc *DepositCreate) createSpec() (*Deposit, *sqlgraph.CreateSpec) {
	var (
		_node = &Deposit{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: deposit.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: deposit.FieldID,
			},
		}
	)
	_spec.OnConflict = dc.conflict
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deposit.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deposit.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := dc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deposit.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := dc.mutation.AccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: deposit.FieldAccountID,
		})
		_node.AccountID = value
	}
	if value, ok := dc.mutation.DepositAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: deposit.FieldDepositAmount,
		})
		_node.DepositAmount = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Deposit.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DepositUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (dc *DepositCreate) OnConflict(opts ...sql.ConflictOption) *DepositUpsertOne {
	dc.conflict = opts
	return &DepositUpsertOne{
		create: dc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Deposit.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dc *DepositCreate) OnConflictColumns(columns ...string) *DepositUpsertOne {
	dc.conflict = append(dc.conflict, sql.ConflictColumns(columns...))
	return &DepositUpsertOne{
		create: dc,
	}
}

type (
	// DepositUpsertOne is the builder for "upsert"-ing
	//  one Deposit node.
	DepositUpsertOne struct {
		create *DepositCreate
	}

	// DepositUpsert is the "OnConflict" setter.
	DepositUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *DepositUpsert) SetCreatedAt(v uint32) *DepositUpsert {
	u.Set(deposit.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DepositUpsert) UpdateCreatedAt() *DepositUpsert {
	u.SetExcluded(deposit.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *DepositUpsert) AddCreatedAt(v uint32) *DepositUpsert {
	u.Add(deposit.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DepositUpsert) SetUpdatedAt(v uint32) *DepositUpsert {
	u.Set(deposit.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DepositUpsert) UpdateUpdatedAt() *DepositUpsert {
	u.SetExcluded(deposit.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *DepositUpsert) AddUpdatedAt(v uint32) *DepositUpsert {
	u.Add(deposit.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DepositUpsert) SetDeletedAt(v uint32) *DepositUpsert {
	u.Set(deposit.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DepositUpsert) UpdateDeletedAt() *DepositUpsert {
	u.SetExcluded(deposit.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *DepositUpsert) AddDeletedAt(v uint32) *DepositUpsert {
	u.Add(deposit.FieldDeletedAt, v)
	return u
}

// SetAccountID sets the "account_id" field.
func (u *DepositUpsert) SetAccountID(v uuid.UUID) *DepositUpsert {
	u.Set(deposit.FieldAccountID, v)
	return u
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *DepositUpsert) UpdateAccountID() *DepositUpsert {
	u.SetExcluded(deposit.FieldAccountID)
	return u
}

// SetDepositAmount sets the "deposit_amount" field.
func (u *DepositUpsert) SetDepositAmount(v uint64) *DepositUpsert {
	u.Set(deposit.FieldDepositAmount, v)
	return u
}

// UpdateDepositAmount sets the "deposit_amount" field to the value that was provided on create.
func (u *DepositUpsert) UpdateDepositAmount() *DepositUpsert {
	u.SetExcluded(deposit.FieldDepositAmount)
	return u
}

// AddDepositAmount adds v to the "deposit_amount" field.
func (u *DepositUpsert) AddDepositAmount(v uint64) *DepositUpsert {
	u.Add(deposit.FieldDepositAmount, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Deposit.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deposit.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *DepositUpsertOne) UpdateNewValues() *DepositUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(deposit.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Deposit.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *DepositUpsertOne) Ignore() *DepositUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DepositUpsertOne) DoNothing() *DepositUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DepositCreate.OnConflict
// documentation for more info.
func (u *DepositUpsertOne) Update(set func(*DepositUpsert)) *DepositUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DepositUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *DepositUpsertOne) SetCreatedAt(v uint32) *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *DepositUpsertOne) AddCreatedAt(v uint32) *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DepositUpsertOne) UpdateCreatedAt() *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DepositUpsertOne) SetUpdatedAt(v uint32) *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *DepositUpsertOne) AddUpdatedAt(v uint32) *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DepositUpsertOne) UpdateUpdatedAt() *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DepositUpsertOne) SetDeletedAt(v uint32) *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *DepositUpsertOne) AddDeletedAt(v uint32) *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DepositUpsertOne) UpdateDeletedAt() *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAccountID sets the "account_id" field.
func (u *DepositUpsertOne) SetAccountID(v uuid.UUID) *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *DepositUpsertOne) UpdateAccountID() *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateAccountID()
	})
}

// SetDepositAmount sets the "deposit_amount" field.
func (u *DepositUpsertOne) SetDepositAmount(v uint64) *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.SetDepositAmount(v)
	})
}

// AddDepositAmount adds v to the "deposit_amount" field.
func (u *DepositUpsertOne) AddDepositAmount(v uint64) *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.AddDepositAmount(v)
	})
}

// UpdateDepositAmount sets the "deposit_amount" field to the value that was provided on create.
func (u *DepositUpsertOne) UpdateDepositAmount() *DepositUpsertOne {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateDepositAmount()
	})
}

// Exec executes the query.
func (u *DepositUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DepositCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DepositUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DepositUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DepositUpsertOne.ID is not supported by MySQL driver. Use DepositUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DepositUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DepositCreateBulk is the builder for creating many Deposit entities in bulk.
type DepositCreateBulk struct {
	config
	builders []*DepositCreate
	conflict []sql.ConflictOption
}

// Save creates the Deposit entities in the database.
func (dcb *DepositCreateBulk) Save(ctx context.Context) ([]*Deposit, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Deposit, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DepositMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DepositCreateBulk) SaveX(ctx context.Context) []*Deposit {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DepositCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DepositCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Deposit.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DepositUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (dcb *DepositCreateBulk) OnConflict(opts ...sql.ConflictOption) *DepositUpsertBulk {
	dcb.conflict = opts
	return &DepositUpsertBulk{
		create: dcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Deposit.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dcb *DepositCreateBulk) OnConflictColumns(columns ...string) *DepositUpsertBulk {
	dcb.conflict = append(dcb.conflict, sql.ConflictColumns(columns...))
	return &DepositUpsertBulk{
		create: dcb,
	}
}

// DepositUpsertBulk is the builder for "upsert"-ing
// a bulk of Deposit nodes.
type DepositUpsertBulk struct {
	create *DepositCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Deposit.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deposit.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *DepositUpsertBulk) UpdateNewValues() *DepositUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(deposit.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Deposit.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *DepositUpsertBulk) Ignore() *DepositUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DepositUpsertBulk) DoNothing() *DepositUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DepositCreateBulk.OnConflict
// documentation for more info.
func (u *DepositUpsertBulk) Update(set func(*DepositUpsert)) *DepositUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DepositUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *DepositUpsertBulk) SetCreatedAt(v uint32) *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *DepositUpsertBulk) AddCreatedAt(v uint32) *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DepositUpsertBulk) UpdateCreatedAt() *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DepositUpsertBulk) SetUpdatedAt(v uint32) *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *DepositUpsertBulk) AddUpdatedAt(v uint32) *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DepositUpsertBulk) UpdateUpdatedAt() *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DepositUpsertBulk) SetDeletedAt(v uint32) *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *DepositUpsertBulk) AddDeletedAt(v uint32) *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DepositUpsertBulk) UpdateDeletedAt() *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAccountID sets the "account_id" field.
func (u *DepositUpsertBulk) SetAccountID(v uuid.UUID) *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *DepositUpsertBulk) UpdateAccountID() *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateAccountID()
	})
}

// SetDepositAmount sets the "deposit_amount" field.
func (u *DepositUpsertBulk) SetDepositAmount(v uint64) *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.SetDepositAmount(v)
	})
}

// AddDepositAmount adds v to the "deposit_amount" field.
func (u *DepositUpsertBulk) AddDepositAmount(v uint64) *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.AddDepositAmount(v)
	})
}

// UpdateDepositAmount sets the "deposit_amount" field to the value that was provided on create.
func (u *DepositUpsertBulk) UpdateDepositAmount() *DepositUpsertBulk {
	return u.Update(func(s *DepositUpsert) {
		s.UpdateDepositAmount()
	})
}

// Exec executes the query.
func (u *DepositUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DepositCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DepositCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DepositUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
