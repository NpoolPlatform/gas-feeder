// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/NpoolPlatform/gas-feeder/pkg/db/ent/migrate"

	"github.com/NpoolPlatform/gas-feeder/pkg/db/ent/coingas"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CoinGas is the client for interacting with the CoinGas builders.
	CoinGas *CoinGasClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CoinGas = NewCoinGasClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:     ctx,
		config:  cfg,
		CoinGas: NewCoinGasClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:     ctx,
		config:  cfg,
		CoinGas: NewCoinGasClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CoinGas.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.CoinGas.Use(hooks...)
}

// CoinGasClient is a client for the CoinGas schema.
type CoinGasClient struct {
	config
}

// NewCoinGasClient returns a client for the CoinGas from the given config.
func NewCoinGasClient(c config) *CoinGasClient {
	return &CoinGasClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coingas.Hooks(f(g(h())))`.
func (c *CoinGasClient) Use(hooks ...Hook) {
	c.hooks.CoinGas = append(c.hooks.CoinGas, hooks...)
}

// Create returns a create builder for CoinGas.
func (c *CoinGasClient) Create() *CoinGasCreate {
	mutation := newCoinGasMutation(c.config, OpCreate)
	return &CoinGasCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CoinGas entities.
func (c *CoinGasClient) CreateBulk(builders ...*CoinGasCreate) *CoinGasCreateBulk {
	return &CoinGasCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CoinGas.
func (c *CoinGasClient) Update() *CoinGasUpdate {
	mutation := newCoinGasMutation(c.config, OpUpdate)
	return &CoinGasUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CoinGasClient) UpdateOne(cg *CoinGas) *CoinGasUpdateOne {
	mutation := newCoinGasMutation(c.config, OpUpdateOne, withCoinGas(cg))
	return &CoinGasUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CoinGasClient) UpdateOneID(id int) *CoinGasUpdateOne {
	mutation := newCoinGasMutation(c.config, OpUpdateOne, withCoinGasID(id))
	return &CoinGasUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CoinGas.
func (c *CoinGasClient) Delete() *CoinGasDelete {
	mutation := newCoinGasMutation(c.config, OpDelete)
	return &CoinGasDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CoinGasClient) DeleteOne(cg *CoinGas) *CoinGasDeleteOne {
	return c.DeleteOneID(cg.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CoinGasClient) DeleteOneID(id int) *CoinGasDeleteOne {
	builder := c.Delete().Where(coingas.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CoinGasDeleteOne{builder}
}

// Query returns a query builder for CoinGas.
func (c *CoinGasClient) Query() *CoinGasQuery {
	return &CoinGasQuery{
		config: c.config,
	}
}

// Get returns a CoinGas entity by its id.
func (c *CoinGasClient) Get(ctx context.Context, id int) (*CoinGas, error) {
	return c.Query().Where(coingas.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CoinGasClient) GetX(ctx context.Context, id int) *CoinGas {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CoinGasClient) Hooks() []Hook {
	return c.hooks.CoinGas
}
