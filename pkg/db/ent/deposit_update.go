// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/gas-feeder/pkg/db/ent/deposit"
	"github.com/NpoolPlatform/gas-feeder/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// DepositUpdate is the builder for updating Deposit entities.
type DepositUpdate struct {
	config
	hooks    []Hook
	mutation *DepositMutation
}

// Where appends a list predicates to the DepositUpdate builder.
func (du *DepositUpdate) Where(ps ...predicate.Deposit) *DepositUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetCreatedAt sets the "created_at" field.
func (du *DepositUpdate) SetCreatedAt(u uint32) *DepositUpdate {
	du.mutation.ResetCreatedAt()
	du.mutation.SetCreatedAt(u)
	return du
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (du *DepositUpdate) SetNillableCreatedAt(u *uint32) *DepositUpdate {
	if u != nil {
		du.SetCreatedAt(*u)
	}
	return du
}

// AddCreatedAt adds u to the "created_at" field.
func (du *DepositUpdate) AddCreatedAt(u int32) *DepositUpdate {
	du.mutation.AddCreatedAt(u)
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DepositUpdate) SetUpdatedAt(u uint32) *DepositUpdate {
	du.mutation.ResetUpdatedAt()
	du.mutation.SetUpdatedAt(u)
	return du
}

// AddUpdatedAt adds u to the "updated_at" field.
func (du *DepositUpdate) AddUpdatedAt(u int32) *DepositUpdate {
	du.mutation.AddUpdatedAt(u)
	return du
}

// SetDeletedAt sets the "deleted_at" field.
func (du *DepositUpdate) SetDeletedAt(u uint32) *DepositUpdate {
	du.mutation.ResetDeletedAt()
	du.mutation.SetDeletedAt(u)
	return du
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (du *DepositUpdate) SetNillableDeletedAt(u *uint32) *DepositUpdate {
	if u != nil {
		du.SetDeletedAt(*u)
	}
	return du
}

// AddDeletedAt adds u to the "deleted_at" field.
func (du *DepositUpdate) AddDeletedAt(u int32) *DepositUpdate {
	du.mutation.AddDeletedAt(u)
	return du
}

// SetAccountID sets the "account_id" field.
func (du *DepositUpdate) SetAccountID(u uuid.UUID) *DepositUpdate {
	du.mutation.SetAccountID(u)
	return du
}

// SetDepositAmount sets the "deposit_amount" field.
func (du *DepositUpdate) SetDepositAmount(u uint64) *DepositUpdate {
	du.mutation.ResetDepositAmount()
	du.mutation.SetDepositAmount(u)
	return du
}

// AddDepositAmount adds u to the "deposit_amount" field.
func (du *DepositUpdate) AddDepositAmount(u int64) *DepositUpdate {
	du.mutation.AddDepositAmount(u)
	return du
}

// Mutation returns the DepositMutation object of the builder.
func (du *DepositUpdate) Mutation() *DepositMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DepositUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := du.defaults(); err != nil {
		return 0, err
	}
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DepositMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			if du.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DepositUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DepositUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DepositUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DepositUpdate) defaults() error {
	if _, ok := du.mutation.UpdatedAt(); !ok {
		if deposit.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized deposit.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := deposit.UpdateDefaultUpdatedAt()
		du.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (du *DepositUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deposit.Table,
			Columns: deposit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: deposit.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deposit.FieldCreatedAt,
		})
	}
	if value, ok := du.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deposit.FieldCreatedAt,
		})
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deposit.FieldUpdatedAt,
		})
	}
	if value, ok := du.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deposit.FieldUpdatedAt,
		})
	}
	if value, ok := du.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deposit.FieldDeletedAt,
		})
	}
	if value, ok := du.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deposit.FieldDeletedAt,
		})
	}
	if value, ok := du.mutation.AccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: deposit.FieldAccountID,
		})
	}
	if value, ok := du.mutation.DepositAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: deposit.FieldDepositAmount,
		})
	}
	if value, ok := du.mutation.AddedDepositAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: deposit.FieldDepositAmount,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deposit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DepositUpdateOne is the builder for updating a single Deposit entity.
type DepositUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DepositMutation
}

// SetCreatedAt sets the "created_at" field.
func (duo *DepositUpdateOne) SetCreatedAt(u uint32) *DepositUpdateOne {
	duo.mutation.ResetCreatedAt()
	duo.mutation.SetCreatedAt(u)
	return duo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (duo *DepositUpdateOne) SetNillableCreatedAt(u *uint32) *DepositUpdateOne {
	if u != nil {
		duo.SetCreatedAt(*u)
	}
	return duo
}

// AddCreatedAt adds u to the "created_at" field.
func (duo *DepositUpdateOne) AddCreatedAt(u int32) *DepositUpdateOne {
	duo.mutation.AddCreatedAt(u)
	return duo
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DepositUpdateOne) SetUpdatedAt(u uint32) *DepositUpdateOne {
	duo.mutation.ResetUpdatedAt()
	duo.mutation.SetUpdatedAt(u)
	return duo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (duo *DepositUpdateOne) AddUpdatedAt(u int32) *DepositUpdateOne {
	duo.mutation.AddUpdatedAt(u)
	return duo
}

// SetDeletedAt sets the "deleted_at" field.
func (duo *DepositUpdateOne) SetDeletedAt(u uint32) *DepositUpdateOne {
	duo.mutation.ResetDeletedAt()
	duo.mutation.SetDeletedAt(u)
	return duo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (duo *DepositUpdateOne) SetNillableDeletedAt(u *uint32) *DepositUpdateOne {
	if u != nil {
		duo.SetDeletedAt(*u)
	}
	return duo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (duo *DepositUpdateOne) AddDeletedAt(u int32) *DepositUpdateOne {
	duo.mutation.AddDeletedAt(u)
	return duo
}

// SetAccountID sets the "account_id" field.
func (duo *DepositUpdateOne) SetAccountID(u uuid.UUID) *DepositUpdateOne {
	duo.mutation.SetAccountID(u)
	return duo
}

// SetDepositAmount sets the "deposit_amount" field.
func (duo *DepositUpdateOne) SetDepositAmount(u uint64) *DepositUpdateOne {
	duo.mutation.ResetDepositAmount()
	duo.mutation.SetDepositAmount(u)
	return duo
}

// AddDepositAmount adds u to the "deposit_amount" field.
func (duo *DepositUpdateOne) AddDepositAmount(u int64) *DepositUpdateOne {
	duo.mutation.AddDepositAmount(u)
	return duo
}

// Mutation returns the DepositMutation object of the builder.
func (duo *DepositUpdateOne) Mutation() *DepositMutation {
	return duo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DepositUpdateOne) Select(field string, fields ...string) *DepositUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Deposit entity.
func (duo *DepositUpdateOne) Save(ctx context.Context) (*Deposit, error) {
	var (
		err  error
		node *Deposit
	)
	if err := duo.defaults(); err != nil {
		return nil, err
	}
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DepositMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			if duo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DepositUpdateOne) SaveX(ctx context.Context) *Deposit {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DepositUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DepositUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DepositUpdateOne) defaults() error {
	if _, ok := duo.mutation.UpdatedAt(); !ok {
		if deposit.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized deposit.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := deposit.UpdateDefaultUpdatedAt()
		duo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (duo *DepositUpdateOne) sqlSave(ctx context.Context) (_node *Deposit, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deposit.Table,
			Columns: deposit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: deposit.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Deposit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deposit.FieldID)
		for _, f := range fields {
			if !deposit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deposit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deposit.FieldCreatedAt,
		})
	}
	if value, ok := duo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deposit.FieldCreatedAt,
		})
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deposit.FieldUpdatedAt,
		})
	}
	if value, ok := duo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deposit.FieldUpdatedAt,
		})
	}
	if value, ok := duo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deposit.FieldDeletedAt,
		})
	}
	if value, ok := duo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deposit.FieldDeletedAt,
		})
	}
	if value, ok := duo.mutation.AccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: deposit.FieldAccountID,
		})
	}
	if value, ok := duo.mutation.DepositAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: deposit.FieldDepositAmount,
		})
	}
	if value, ok := duo.mutation.AddedDepositAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: deposit.FieldDepositAmount,
		})
	}
	_node = &Deposit{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deposit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
